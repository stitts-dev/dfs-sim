version: '3.8'

services:
  # NOTE: PostgreSQL removed - all services now use Supabase PostgreSQL

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dfs-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dfs-network

  # Sports Data Service (formerly Golf Service)
  sports-data-service:
    build:
      context: .
      dockerfile: services/sports-data-service/Dockerfile
    container_name: dfs-sports-data-service
    environment:
      - SERVICE_NAME=sports-data
      - PORT=8081
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_GOLF_DB:-0}
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - DATAGOLF_API_KEY=${DATAGOLF_API_KEY:-your-datagolf-api-key-here}
      - DATAGOLF_BASE_URL=${DATAGOLF_BASE_URL:-https://feeds.datagolf.com}
      - DATAGOLF_ENABLED=${DATAGOLF_ENABLED:-false}
      - ESPN_RATE_LIMIT=10
      - CIRCUIT_BREAKER_THRESHOLD=5
      - LOG_LEVEL=info
      - ENV=production
      # Enable background data fetching
      - ENABLE_BACKGROUND_JOBS=true
      - DATA_FETCH_INTERVAL=30m
      - SKIP_INITIAL_DATA_FETCH=false
      - SKIP_INITIAL_GOLF_SYNC=false
      - SKIP_INITIAL_CONTEST_DISCOVERY=false
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./services/sports-data-service/migrations:/app/migrations
    networks:
      - dfs-network
    restart: unless-stopped

  # Optimization Service
  optimization-service:
    build:
      context: .
      dockerfile: services/optimization-service/Dockerfile
    container_name: dfs-optimization-service
    environment:
      - SERVICE_NAME=optimization
      - PORT=8082
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_OPTIMIZATION_DB:-1}
      - MAX_LINEUPS=150
      - OPTIMIZATION_TIMEOUT=30
      - MAX_SIMULATIONS=100000
      - SIMULATION_WORKERS=4
      - DATAGOLF_API_KEY=${DATAGOLF_API_KEY:-your-datagolf-api-key-here}
      - DATAGOLF_BASE_URL=${DATAGOLF_BASE_URL:-https://feeds.datagolf.com}
      - DATAGOLF_ENABLED=${DATAGOLF_ENABLED:-false}
      - LOG_LEVEL=info
      - ENV=production
      - ASSUME_NO_MOVING_GC_UNSAFE_RISK_IT_WITH=go1.21
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - dfs-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: dfs-user-service
    environment:
      - SERVICE_NAME=user
      - PORT=8083
      - SMS_PROVIDER=${SMS_PROVIDER:-supabase}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_USER_DB:-3}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - LOG_LEVEL=info
      - ENV=production
    ports:
      - "8083:8083"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./services/user-service/migrations:/app/migrations
    networks:
      - dfs-network
    restart: unless-stopped

  # AI Recommendations Service
  ai-recommendations-service:
    build:
      context: .
      dockerfile: services/ai-recommendations-service/Dockerfile
    container_name: dfs-ai-recommendations-service
    environment:
      - SERVICE_NAME=ai-recommendations
      - PORT=8084
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_AI_DB:-4}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - AI_RATE_LIMIT=5
      - AI_CACHE_EXPIRATION=3600
      - LOG_LEVEL=info
      - ENV=production
      # External service URLs for data aggregation
      - GOLF_SERVICE_URL=http://sports-data-service:8081
      - OPTIMIZATION_SERVICE_URL=http://optimization-service:8082
      - USER_SERVICE_URL=http://user-service:8083
    ports:
      - "8084:8084"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - dfs-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G

  # Real-Time Service
  realtime-service:
    build:
      context: .
      dockerfile: services/realtime-service/Dockerfile
    container_name: dfs-realtime-service
    environment:
      - SERVICE_NAME=realtime
      - PORT=8085
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_REALTIME_DB:-5}
      - LOG_LEVEL=info
      - ENV=production
      # Real-time configuration
      - MAX_EVENT_BUFFER_SIZE=10000
      - EVENT_BATCH_SIZE=100
      - EVENT_PROCESSING_INTERVAL=1s
      - OWNERSHIP_UPDATE_INTERVAL=30s
      - ALERT_RATE_LIMIT=50
      - ENABLE_AUTO_SWAP=false
      - LATE_SWAP_TIME_BUFFER=10m
      # External service URLs for data integration
      - GOLF_SERVICE_URL=http://sports-data-service:8081
      - OPTIMIZATION_SERVICE_URL=http://optimization-service:8082
      - USER_SERVICE_URL=http://user-service:8083
      - AI_RECOMMENDATIONS_SERVICE_URL=http://ai-recommendations-service:8084
    ports:
      - "8085:8085"
    depends_on:
      redis:
        condition: service_healthy
      sports-data-service:
        condition: service_healthy
      optimization-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./services/realtime-service/migrations:/app/migrations
    networks:
      - dfs-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: dfs-api-gateway
    environment:
      - SERVICE_NAME=gateway
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/${REDIS_GATEWAY_DB:-2}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:80
      - GOLF_SERVICE_URL=http://sports-data-service:8081
      - OPTIMIZATION_SERVICE_URL=http://optimization-service:8082
      - USER_SERVICE_URL=http://user-service:8083
      - AI_RECOMMENDATIONS_SERVICE_URL=http://ai-recommendations-service:8084
      - REALTIME_SERVICE_URL=http://realtime-service:8085
      - LOG_LEVEL=info
      - ENV=production
      # Enable background data fetching
      - ENABLE_BACKGROUND_JOBS=true
      - DATA_FETCH_INTERVAL=30m
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - ESPN_RATE_LIMIT=10
      - BALLDONTLIE_API_KEY=${BALLDONTLIE_API_KEY}
      - THESPORTSDB_API_KEY=${THESPORTSDB_API_KEY}
    ports:
      - "8080:8080"
    depends_on:
      - sports-data-service
      - optimization-service
      - user-service
      - ai-recommendations-service
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "-O", "/dev/null", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - dfs-network
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: dfs-nginx
    ports:
      - "8090:80"
      - "443:443"
    volumes:
      - ./services/api-gateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dfs-network
    restart: unless-stopped

  # Frontend (Optional - for development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dfs-frontend
    environment:
      - VITE_API_URL=http://localhost:8090/api/v1
      - VITE_WS_URL=ws://localhost:8090/ws
    ports:
      - "5173:5173"
    depends_on:
      - nginx
    networks:
      - dfs-network
    profiles:
      - frontend

volumes:
  redis_data:
    driver: local

networks:
  dfs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
