version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: dfs-postgres
    environment:
      POSTGRES_DB: dfs_optimizer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dfs-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dfs-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dfs-network

  # Golf Service
  golf-service:
    build:
      context: .
      dockerfile: services/golf-service/Dockerfile
    container_name: dfs-golf-service
    environment:
      - SERVICE_NAME=golf
      - PORT=8081
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dfs_optimizer?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - ESPN_RATE_LIMIT=10
      - CIRCUIT_BREAKER_THRESHOLD=5
      - LOG_LEVEL=info
      - ENV=production
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./services/golf-service/migrations:/app/migrations
    networks:
      - dfs-network
    restart: unless-stopped

  # Optimization Service
  optimization-service:
    build:
      context: .
      dockerfile: services/optimization-service/Dockerfile
    container_name: dfs-optimization-service
    environment:
      - SERVICE_NAME=optimization
      - PORT=8082
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dfs_optimizer?sslmode=disable
      - REDIS_URL=redis://redis:6379/1
      - MAX_LINEUPS=150
      - OPTIMIZATION_TIMEOUT=30
      - MAX_SIMULATIONS=100000
      - SIMULATION_WORKERS=4
      - LOG_LEVEL=info
      - ENV=production
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - dfs-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: dfs-api-gateway
    environment:
      - SERVICE_NAME=gateway
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dfs_optimizer?sslmode=disable
      - REDIS_URL=redis://redis:6379/2
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:80
      - GOLF_SERVICE_URL=http://golf-service:8081
      - OPTIMIZATION_SERVICE_URL=http://optimization-service:8082
      - LOG_LEVEL=info
      - ENV=production
    ports:
      - "8080:8080"
    depends_on:
      golf-service:
        condition: service_healthy
      optimization-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - dfs-network
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: dfs-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/api-gateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dfs-network
    restart: unless-stopped

  # Frontend (Optional - for development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dfs-frontend
    environment:
      - VITE_API_URL=http://localhost/api/v1
      - VITE_WS_URL=ws://localhost/ws
    ports:
      - "5173:5173"
    depends_on:
      - nginx
    networks:
      - dfs-network
    profiles:
      - frontend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dfs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16